import pandas as pd 
df = pd.read_csv("uber_data.csv")
df.info()
df[['tpep_pickup_datetime', 'tpep_dropoff_datetime']].drop_duplicates()
df.head()
# Create an empty DataFrame
datetime_dim = pd.DataFrame()

# Assign the index as the 'datetime_id' column
datetime_dim['datetime_id'] = range(len(datetime_dim))

# Print the resulting DataFrame
print(datetime_dim)
 df[['tpep_pickup_datetime', 'tpep_dropoff_datetime']].drop_duplicates().reset_index(drop=True)
 Read the Uber dataset into a DataFrame
df = pd.read_csv('uber_data.csv')

# Convert pickup datetime column to datetime data type
df['tpep_pickup_datetime'] = pd.to_datetime(df['tpep_pickup_datetime'])
df['tpep_dropoff_datetime'] = pd.to_datetime(df['tpep_dropoff_datetime'])

# Create a new DataFrame for datetime dimensions
datetime_dim = pd.DataFrame()

datetime_dim['pickup_hour'] = df['tpep_pickup_datetime'].dt.hour
datetime_dim['pickup_day'] = df['tpep_pickup_datetime'].dt.day
datetime_dim['pickup_month'] = df['tpep_pickup_datetime'].dt.month
datetime_dim['pickup_year'] = df['tpep_pickup_datetime'].dt.year
datetime_dim['pickup_weekday'] = df['tpep_pickup_datetime'].dt.weekday

# Create new columns for dropoff hour, day, month, year, and weekday
datetime_dim['dropoff_hour'] = df['tpep_dropoff_datetime'].dt.hour
datetime_dim['dropoff_day'] = df['tpep_dropoff_datetime'].dt.day
datetime_dim['dropoff_month'] = df['tpep_dropoff_datetime'].dt.month
datetime_dim['dropoff_year'] = df['tpep_dropoff_datetime'].dt.year
datetime_dim['dropoff_weekday'] = df['tpep_dropoff_datetime'].dt.weekday
 Create a datetime_id column with unique identifiers for each row
datetime_dim['datetime_id'] = datetime_dim.index

datetime_dim

import pandas as pd

# Read the Uber dataset into a DataFrame
df = pd.read_csv('uber_data.csv')

# Convert pickup datetime column to datetime data type
df['tpep_pickup_datetime'] = pd.to_datetime(df['tpep_pickup_datetime'])
df['tpep_dropoff_datetime'] = pd.to_datetime(df['tpep_dropoff_datetime'])

# Create a new DataFrame for passenger count dimensions
passenger_count_dim = pd.DataFrame()

# Copy the passenger_count column from the original DataFrame and drop duplicates
passenger_count_dim['passenger_count'] = df['passenger_count'].drop_duplicates().reset_index(drop=True)

# Create a passenger_count_id column with unique identifiers for each row
passenger_count_dim['passenger_count_id'] = passenger_count_dim.index

passenger_count_dim = passenger_count_dim[['passenger_count_id', 'passenger_count']]



trip_distance_count_dim = pd.DataFrame()

trip_distance_count_dim['trip_distance'] = df['trip_distance'].drop_duplicates().reset_index(drop=True)

trip_distance_count_dim['trip_distance_count_id'] = trip_distance_count_dim.index

trip_distance_count_dim = trip_distance_count_dim[['trip_distance_count_id', 'trip_distance']]

(passenger_count_dim)
(trip_distance_count_dim)



rate_code_type = {
    1: "standard rate",
    2: "JFK",
    3: "Newark",
    4: "nassau or westchester",
    5: "negotiated fare",
    6: "group ride"
}

rate_code_count_dim = pd.DataFrame()
rate_code_count_dim['rate_code_count'] = df['RatecodeID'].drop_duplicates().reset_index(drop=True)
rate_code_count_dim['rate_code_id'] = rate_code_count_dim.index

rate_code_dim = pd.DataFrame()
rate_code_dim['rate_code_id'] = rate_code_type.keys()
rate_code_dim['rate_code_name'] = rate_code_dim['rate_code_id'].map(rate_code_type)

(rate_code_count_dim)

(rate_code_dim)

pickup_location_dim = df[['pickup_longitude', 'pickup_latitude']].drop_duplicates().reset_index(drop=True)
pickup_location_dim['pickup_location_id'] = pickup_location_dim.index
pickup_location_dim = pickup_location_dim[['pickup_location_id', 'pickup_latitude', 'pickup_longitude']]

dropoff_location_dim = df[['dropoff_longitude', 'dropoff_latitude']].drop_duplicates().reset_index(drop=True)
dropoff_location_dim['dropoff_location_id'] = dropoff_location_dim.index
dropoff_location_dim = dropoff_location_dim[['dropoff_location_id', 'dropoff_latitude', 'dropoff_longitude']]

pickup_location_dim
dropoff_location_dim


payment_type_name = {
    1: "credit card",
    2: "cash",
    3: "no charge",
    4: "dispute",
    5: "unknown",
    6: "voided trip"
}

payment_type_dim = df[['payment_type']].drop_duplicates().reset_index(drop=True)
payment_type_dim['payment_type_id'] = payment_type_dim.index
payment_type_dim['payment_type_name'] = payment_type_dim['payment_type'].map(payment_type_name)
payment_type_dim.head()
trip_distance_dim = df[['trip_distance']].drop_duplicates().reset_index(drop=True)
trip_distance_dim['trip_distance_id'] = trip_distance_dim.index


fact_table = df.merge(passenger_count_dim, on='passenger_count') \
                .merge(trip_distance_dim, on='trip_distance') \
                .merge(rate_code_dim, left_on='RatecodeID', right_on='rate_code_id') \
                .merge(pickup_location_dim, on=['pickup_longitude', 'pickup_latitude']) \
                .merge(dropoff_location_dim, on=['dropoff_longitude', 'dropoff_latitude']) \
                .merge(datetime_dim, on=['tpep_pickup_datetime', 'tpep_dropoff_datetime']) \
                .merge(payment_type_dim, on='payment_type') \
                [['VendorID', 'tpep_pickup_datetime', 'tpep_dropoff_datetime', 'passenger_count', 'trip_distance', 'pickup_longitude', 'pickup_latitude', 'RatecodeID', 'store_and_fwd_flag', 'dropoff_longitude', 'dropoff_latitude', 'payment_type', 'fare_amount', 'extra', 'mta_tax', 'tip_amount', 'tolls_amount', 'improvement_surcharge', 'total_amount']]
fact_table


#Importing as CSV file
fact_table.to_csv('fact_table.csv', index=False)
datetime_dim.to_csv('datetime_dim.csv', index=False)
passenger_count_dim.to_csv('passenger_count_dim.csv', index=False)
trip_distance_count_dim.to_csv('trip_distance_count_dim.csv', index=False)
rate_code_count_dim.to_csv('rate_code_count_dim.csv', index=False)
rate_code_dim.to_csv('rate_code_dim.csv', index=False)
pickup_location_dim.to_csv('pickup_location_dim.csv', index=False)
dropoff_location_dim.to_csv('dropoff_location_dim.csv', index=False)
payment_type_dim.to_csv('payment_type_dim.csv', index=False)
